TaelinArena.interact_with
  : TaelinArena.Game.Thing ->
    TaelinArena.Game.Thing ->
    TaelinArena.Game.Thing
  TaelinArena.interact_with
//   (this) (that)
//   //Physical interactions
//   let this_pos = TaelinArena.Game.get_thing_pos(this)
//   let this_dir = TaelinArena.Game.get_thing_dir(this)
//   let this_box = TaelinArena.Game.get_thing_box(this)
//   let that_pos = TaelinArena.Game.get_thing_pos(that)
//   let that_dir = TaelinArena.Game.get_thing_dir(that)
//   let that_box = TaelinArena.Game.get_thing_box(that)
//   let that_hit = TaelinArena.Game.get_thing_hit(that)
//   let out_vec  = 
//     TaelinArena.collide_with
//     |this_pos;
//     |this_dir;
//     |this_pos;
//     |that_pos;
//     |that_dir;
//     |that_box;
//   let this = 
//     out_vec<() TaelinArena.Game.Thing>
//     | this;           //case none
//     | (out_vec.value) //case some 
//       let new_pos = F64.V3.add(this_pos)(out_vec.value)
//       TaelinArena.Game.set_thing_pos(this)(new_pos);

//   //Hit by an effect
//   let apply_hit = ((hit) (this)
//     let this_pos = TaelinArena.Game.get_thing_pos(this)
//     let this_dir = TaelinArena.Game.get_thing_dir(this)
//     let this_box = TaelinArena.Game.get_thing_box(this)
//     let this_sid = TaelinArena.Game.get_thing_sid(this)
//     hit<() TaelinArena.Game.Thing> | (hit.eff) (hit.pos) (hit.dir) (hit.box)
//     let out_vec = 
//       TaelinArena.collide_with
//       |this_pos;
//       |this_dir;
//       |this_box;
//       |hit.pos;
//       |hit.dir;
//       |hit.box;
//     let apply_eff = ((eff) (this)
//       eff<() TaelinArena.Game.Thing>
//       | (eff.lif)              //heal
//         F64.eql(this_sid)(that_sid)<() TaelinArena.Game.Thing>
//         | this;
//         | let this_dmg = TaelinArena.Game.get_thing_dmg(this)
//           TaelinArena.Game.set_thing_dmg(this)(F64.sub(this_dmg)(eff.lif));
      
//       | (eff.dmg)              //dmg
//         F64.eql(this_sid)(that_sid)<() TaelinArena.Game.Thing>
//         | this;
//         | TaelinArena.Game.handle_shields(eff.dmg)(this);

//       | (eff.mag)              //repulse
//         F64.eql(this_sid)(that_sid)<() TaelinArena.Game.Thing>
//         | this;
//         | let dir = F64.V3.look_at(`)

//       | (eff.mag) (eff.dir)    //impulse
//       | (eff.dur) (eff.val)    //slow
//       | (eff.dur) (eff.val)    //haste
//       | (eff.dur) (eff.val)    //shield
//       | (eff.dur)              //silence
//       | (eff.dur)              //root
//       | (eff.dur)              //stun
//       | (eff.to_pos) (eff.all) //teleport
//     ) :: TaelinArena.Game.Effect -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing 
//   ) :: TaelinArena.Game.Hit -> TaelinArena.Game.Thing -> TaelinArena.Game.Thing

// Interaction function between two things
// interact_with(this:Thing, that:Thing): Thing
//   // Physical collisions
//   let this =
//     case this |thing
//     case that |thing
//     let out_vec = collide_with(
//       this.pos, this.dir, this.box,
//       that.pos, that.dir, that.box)
//     case out_vec
//     | none => this
//     | some => this <= thing(pos = add_v3(pos,out_vec.value))
//   // Hit by an effect
//   let this =
//     case that |thing
//     let apply_hit = (hit, this) =>
//       case hit |hit
//       case this |thing
//       let out_vec = collide_with(
//         this.pos, this.dir, this.box,
//         hit.pos, hit.dir, hit.box)
//       case out_vec
//       | none => this
//       | some =>
//         let apply_eff = (eff, this) =>
//           case eff
//           | heal =>
//             // IMPORTANT: use commented code. 
//             // I inverted this so the puddle on debug mode could heal 
//             if this.sid === that.sid then
//               this
//               // this <= thing(dmg = dmg - eff.lif)
//             else
//               // this
//               this <= thing(dmg = dmg - eff.lif)
//           | damage =>
//             if this.sid === that.sid then
//               this
//             else
//             // hit shields on thing.buf before hitting hp
//               handle_shields(eff.dmg, this)
//           | repulse =>
//             if this.sid === that.sid then
//               this
//             else
//               let dir = lookat_v3(hit.pos, this.pos, v3(1,0,0))
//               let vec = scale_v3(eff.mag, dir)
//               this <= thing(knk = vec)
//           | impulse =>
//             if this.sid === that.sid then
//               this
//             else
//               let vec = scale_v3(eff.mag, eff.dir)
//               this <= thing(knk = vec)
//           | slow => 
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ slowed(eff.dur, eff.val), this.buf)
//               this <= thing(buf = updated_buffs)
//           | haste =>
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ hasted(eff.dur, eff.val), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | shield =>
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ shielded(eff.dur, eff.val), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | silence => 
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ silenced(eff.dur), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | root =>
//             if this.sid === that.sid then
//               this 
//             else 
//               let updated_buffs = cons(_ rooted(eff.dur), this.buf)
//               this <= thing(buf = updated_buffs) 
//           | stun => 
//             if this.sid === that.sid then 
//               this 
//             else 
//               let updated_buffs = cons(_ stuned(eff.dur), this.buf)
//               this <= thing(buf = updated_buffs)
//           | teleport =>
//             if eff.all then
//               this <= thing(pos = eff.to_pos)
//             else 
//               if this.sid === that.sid then
//                 this <= thing(pos = eff.to_pos)
//               else 
//                 this
//         fold(Effect; Thing; this, apply_eff, hit.eff)
//     fold(Hit; Thing; this, apply_hit, that.hit)
//   this