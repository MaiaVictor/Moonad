Parse.all: List(String) -> Parse(Term)
  (vars)
  Parse.bind<String><Term>(Parse.nam(Bool.true)) | (self)
  let vars = List.cons<String>(self)(vars)
  Parse.bind<Pair(Bool)(Pair(String)(Term))><Term>
  | Parse.enclose<Pair(String)(Term)>
    | Parse.bind<String><Pair(String)(Term)>(Parse.nam(Bool.true))
    | (n)
      Parse.then<Unit><Pair(String)(Term)>(Parse.space)
    | Parse.then<String><Pair(String)(Term)>(Parse.symbol(":"))
    | Parse.bind<Term><Pair(String)(Term)>(Parse.trm(vars))
    | (t)
      Parse.pure<Pair(String)(Term)>(Pair.new<String><Term>(n)(t));;;;;;
  | (x)
  x<() Parse(Term)> | (eras) (p)
  p<() Parse(Term)> | (name) (bind)
  Parse.then<Unit><Term>(Parse.space) |
  Parse.then<String><Term>(Parse.symbol("->")) |
  let vars = List.cons<String>(name)(vars)
  Parse.bind<Term><Term>(Parse.trm(vars)) | (body)
  Parse.pure<Term>(Term.all(eras)(self)(name)(bind)(body));;;;;;;

