Parser.token:
  <S: Type> ->
  <E: Type> ->
  <A: Type> ->
  (Char -> Maybe(A)) ->
  List(Parser.Error.Item) ->
  Parser(S)(E)(A)

  <S> <E> <A> (f) (es)
  <X> (s1) (empty_value) (empty_error) (eaten_value) (eaten_error)
  s1<() X> | (input) (index) (error) (state)
  input<() X>
  | let unex = Maybe.some<Parser.Error.Item>(Parser.Error.Item.end_of_input)
    empty_error(s1)(Parser.Error.make_trivial<E>(Nat.zero)(unex)(es));
  | (c) (cs)
    f(c)<() X>
    | let item = Parser.Error.Item.tokens(NonEmpty.end<Char>(c))
      let unex = Maybe.some<Parser.Error.Item>(item)
      empty_error(s1)(Parser.Error.make_trivial<E>(index)(unex)(es));
    | (x)
      let s2 = Parser.State.make<S><E>(cs)(Nat.succ(index))(error)(state)
      eaten_value(s2)(x);;;

