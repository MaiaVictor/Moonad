Term.to_hterm: Term -> List(HTerm) -> Nat -> HTerm
  (term) (vars) (depth)
  term<() HTerm>
  | (hash) (indx)
    List.find<HTerm>(vars)((x) (i) Nat.eql(i)(indx))<() HTerm>
    | HTerm.var(Nat.sub(Nat.succ(indx))(depth))(Bool.false);
    | (value) Pair.fst<HTerm><Nat>(value);;
  | (hash) (name)
    HTerm.ref(name);
  | (hash)
    HTerm.typ;
  | (hash) (eras) (self) (name) (bind) (body)
    HTerm.all
    | eras;
    | (s) Term.to_hterm(bind)(List.cons<HTerm>(s)(vars))(Nat.succ(depth));
    | (s) (x) Term.to_hterm(body)(List.cons<HTerm>(x)(List.cons<HTerm>(s)(vars)))(Nat.succ(Nat.succ(depth)));;
  | (hash) (eras) (name) (body)
    eras<() HTerm>
    | Term.to_hterm(Term.subst(body)(Term.ref(String.nil))(Nat.0))(vars)(depth);
    | HTerm.lam((x) Term.to_hterm(body)(List.cons<HTerm>(x)(vars))(Nat.succ(depth)));;
  | (hash) (eras) (func) (argm)
    eras<() HTerm>
    | Term.to_hterm(func)(vars)(depth);
    | let func = Term.to_hterm(func)(vars)(depth)
      let argm = Term.to_hterm(argm)(vars)(depth)
      HTerm.app(func)(argm);;
  | (hash) (name) (expr) (body)
    let expr = Term.to_hterm(expr)(vars)(depth)
    let body = ((x) Term.to_hterm(body)(List.cons<HTerm>(x)(vars))(Nat.succ(depth))) :: HTerm -> HTerm
    body(expr);
  | (hash) (done) (expr) (type)
    Term.to_hterm(expr)(vars)(depth);
