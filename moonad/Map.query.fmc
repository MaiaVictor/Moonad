query: <A: Type> -> (A -> Pair(A)(A)) -> Bits -> Map(A) -> Pair(Map(A))(Maybe(A))
  <A> (cpy) (bits) (map)
  let rec = query<A>
  bits<() ((A -> Pair(A)(A)) -> Bits -> Map(A) -> Pair(Map(A))(Maybe(A)))
           -> (A -> Pair(A)(A)) -> Map(A) -> Pair(Map(A))(Maybe(A))>
  | (rec) (cpy) (map) map<() Pair(Map(A))(Maybe(A))>
    | let map = Map.empty<A>
      let val = Maybe.none<A>
      Pair.make<Map(A)><Maybe(A)>(map)(val)
    ;
    | (map.val) (map.lft) (map.rgt)
      let mval = map.val
      mval<() Map(A) -> Map(A) -> Pair(Map(A))(Maybe(A))>
      | (map.lft) (map.rgt)
        let map = Map.multi<A>(Maybe.none<A>)(map.lft)(map.rgt)
        let val = Maybe.none<A>
        Pair.make<Map(A)><Maybe(A)>(map)(val)
      ;
      | (mval.value) (map.lft) (map.rgt)
        let p = cpy(mval.value)
        p<() Pair(Map(A))(Maybe(A))>
        | (p.fst) (p.snd)
          let map = Map.multi<A>(Maybe.some<A>(p.fst))(map.lft)(map.rgt)
          let val = Maybe.some<A>(p.snd)
          Pair.make<Map(A)><Maybe(A)>(map)(val)
        ;
      ;(map.lft)(map.rgt)
    ;
  ;
  | (bits.pred) (rec) (cpy) (map)
    map<() Pair(Map(A))(Maybe(A))>
    | let map = Map.empty<A>
      let val = Maybe.none<A>
      Pair.make<Map(A)><Maybe(A)>(map)(val)
    ;
    | (map.val) (map.lft) (map.rgt)
      let p = rec(cpy)(bits.pred)(map.lft)
      p<() Pair(Map(A))(Maybe(A))>
      | (p.fst) (p.snd)
        let map = Map.multi<A>(map.val)(p.fst)(map.rgt)
        let val = p.snd
        Pair.make<Map(A)><Maybe(A)>(map)(val)
      ;
    ;
  ;
  | (bits.pred) (rec) (cpy) (map)
    map<() Pair(Map(A))(Maybe(A))>
    | let map = Map.empty<A>
      let val = Maybe.none<A>
      Pair.make<Map(A)><Maybe(A)>(map)(val)
    ;
    | (map.val) (map.lft) (map.rgt)
      let p = rec(cpy)(bits.pred)(map.rgt)
      p<() Pair(Map(A))(Maybe(A))>
      | (p.fst) (p.snd)
        let map = Map.multi<A>(map.val)(map.lft)(p.fst)
        let val = p.snd
        Pair.make<Map(A)><Maybe(A)>(map)(val)
      ;
    ;
  ;(rec)(cpy)(map)

