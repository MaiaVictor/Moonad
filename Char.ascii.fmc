Char.ascii: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Char
  (a) (b) (c) (d) (e) (f) (g) (h)
  let w0 = Word.0
  let w1 = Word.1
  let wA = a<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wB = b<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wC = c<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wD = d<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wE = e<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wF = f<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wG = g<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  let wH = h<() <size: Nat> -> Word(size) -> Word(Nat.succ(size))>(w0)(w1)
  U32.make(
    wH<Nat.31>(wG<Nat.30>(wF<Nat.29>(wE<Nat.28>(
    wD<Nat.27>(wC<Nat.26>(wB<Nat.25>(wA<Nat.24>(
    w0<Nat.23>(w0<Nat.22>(w0<Nat.21>(w0<Nat.20>(
    w0<Nat.19>(w0<Nat.18>(w0<Nat.17>(w0<Nat.16>(
    w0<Nat.15>(w0<Nat.14>(w0<Nat.13>(w0<Nat.12>(
    w0<Nat.11>(w0<Nat.10>(w0<Nat.9 >(w0<Nat.8 >(
    w0<Nat.7 >(w0<Nat.6 >(w0<Nat.5 >(w0<Nat.4 >(
    w0<Nat.3 >(w0<Nat.2 >(w0<Nat.1 >(w0<Nat.0 >(
    Word.nil)))))))))))))))))))))))))))))))))